import java.util.*;

public class Bicoloring {
    static boolean isBipartite(List<List<Integer>> graph, int V) {
        int[] color = new int[V];
        Arrays.fill(color, -1); // -1 means uncolored

        for (int start = 0; start < V; start++) {
            if (color[start] == -1) {
                Queue<Integer> q = new LinkedList<>();
                q.offer(start);
                color[start] = 0; // Start coloring with 0

                while (!q.isEmpty()) {
                    int u = q.poll();

                    for (int v : graph.get(u)) {
                        if (color[v] == -1) {
                            color[v] = 1 - color[u]; // Alternate color
                            q.offer(v);
                        } else if (color[v] == color[u]) {
                            return false; // Same color on adjacent nodes
                        }
                    }
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int V = 4;
        List<List<Integer>> graph = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            graph.add(new ArrayList<>());
        }

        // Sample graph:
        // 0 -- 1
        // |    |
        // 3 -- 2
        graph.get(0).add(1);
        graph.get(1).add(0);
        graph.get(1).add(2);
        graph.get(2).add(1);
        graph.get(2).add(3);
        graph.get(3).add(2);
        graph.get(3).add(0);
        graph.get(0).add(3);

        if (isBipartite(graph, V))
            System.out.println("Graph is Bicolorable (Bipartite)");
        else
            System.out.println("Graph is NOT Bicolorable");
    }
}
