import java.util.*;

public class DFS {

    // Graph represented using an adjacency list
    private Map<Integer, List<Integer>> adjList;

    public DFS() {
        adjList = new HashMap<>();
    }

    // Add edge to the graph (undirected by default)
    public void addEdge(int src, int dest) {
        adjList.computeIfAbsent(src, k -> new ArrayList<>()).add(dest);
        adjList.computeIfAbsent(dest, k -> new ArrayList<>()).add(src); // remove this line for directed graph
    }

    // DFS function
    public void dfs(int start) {
        Set<Integer> visited = new HashSet<>();
        System.out.print("DFS starting from node " + start + ": ");
        dfsHelper(start, visited);
    }

    // Recursive helper function for DFS
    private void dfsHelper(int node, Set<Integer> visited) {
        visited.add(node);
        System.out.print(node + " ");

        for (int neighbor : adjList.getOrDefault(node, new ArrayList<>())) {
            if (!visited.contains(neighbor)) {
                dfsHelper(neighbor, visited);
            }
        }
    }

    // Main method to test DFS
    public static void main(String[] args) {
        DFS graph = new DFS();

        // Adding edges
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);

        // Starting DFS from node 0
        graph.dfs(0);
    }
}
