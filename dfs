import java.util.*;

public class DFSS {
    static class Graph {
        int V;
        List<List<Integer>> adj;

        Graph(int V) {
            this.V = V;
            adj = new ArrayList<>();
            for (int i = 0; i < V; i++)
                adj.add(new ArrayList<>());
        }

        void addEdge(int u, int v) {
            adj.get(u).add(v);
            adj.get(v).add(u); // Remove for directed graph
        }

        void dfs(int start, boolean[] visited) {
            visited[start] = true;
            System.out.print(start + " ");
            for (int neighbor : adj.get(start)) {
                if (!visited[neighbor])
                    dfs(neighbor, visited);
            }
        }

        void dfsTraversal(int start) {
            boolean[] visited = new boolean[V];
            dfs(start, visited);
        }
    }

    public static void main(String[] args) {
        Graph g = new Graph(6);
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(1, 4);
        g.addEdge(2, 5);

        System.out.println("DFS traversal starting from node 0:");
        g.dfsTraversal(0);
    }
}
