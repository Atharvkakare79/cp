public class NQueens {
    static int N;

    public static void main(String[] args) {
        N = 4; // You can change N to any value (e.g., 8 for 8-Queens)
        char[][] board = new char[N][N];

        // Initialize board with '.'
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                board[i][j] = '.';
            }
        }

        if (solve(board, 0)) {
            printBoard(board);
        } else {
            System.out.println("No solution exists");
        }
    }

    static boolean solve(char[][] board, int row) {
        if (row == N) {
            return true; // All queens are placed
        }

        for (int col = 0; col < N; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q'; // Place queen
                if (solve(board, row + 1)) {
                    return true; // Recurse for next row
                }
                board[row][col] = '.'; // Backtrack
            }
        }

        return false; // No valid placement in this row
    }

    static boolean isSafe(char[][] board, int row, int col) {
        // Check vertical
        for (int i = 0; i < row; i++)
            if (board[i][col] == 'Q') return false;

        // Check diagonal (top-left)
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--)
            if (board[i][j] == 'Q') return false;

        // Check diagonal (top-right)
        for (int i = row - 1, j = col + 1; i >= 0 && j < N; i--, j++)
            if (board[i][j] == 'Q') return false;

        return true;
    }

    static void printBoard(char[][] board) {
        System.out.println("Solution:");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
}
